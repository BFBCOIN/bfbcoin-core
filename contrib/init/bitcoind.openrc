#!/sbin/runscript

# backward compatibility for existing gentoo layout 
#
if [ -d "/var/lib/bfb/.bfb" ]; then
	BFBD_DEFAULT_DATADIR="/var/lib/bfb/.bfb"
else
	BFBD_DEFAULT_DATADIR="/var/lib/bfbd"
fi

BFBD_CONFIGFILE=${BFBD_CONFIGFILE:-/etc/bfb/bfb.conf}
BFBD_PIDDIR=${BFBD_PIDDIR:-/var/run/bfbd}
BFBD_PIDFILE=${BFBD_PIDFILE:-${BFBD_PIDDIR}/bfbd.pid}
BFBD_DATADIR=${BFBD_DATADIR:-${BFBD_DEFAULT_DATADIR}}
BFBD_USER=${BFBD_USER:-${BFB_USER:-bfb}}
BFBD_GROUP=${BFBD_GROUP:-bfb}
BFBD_BIN=${BFBD_BIN:-/usr/bin/bfbd}
BFBD_NICE=${BFBD_NICE:-${NICELEVEL:-0}}
BFBD_OPTS="${BFBD_OPTS:-${BFB_OPTS}}"

name="bfb Core Daemon"
description="bfb cryptocurrency P2P network daemon"

command="/usr/bin/bfbd"
command_args="-pid=\"${BFBD_PIDFILE}\" \
		-conf=\"${BFBD_CONFIGFILE}\" \
		-datadir=\"${BFBD_DATADIR}\" \
		-daemon \
		${BFBD_OPTS}"

required_files="${BFBD_CONFIGFILE}"
start_stop_daemon_args="-u ${BFBD_USER} \
			-N ${BFBD_NICE} -w 2000"
pidfile="${BFBD_PIDFILE}"

# The retry schedule to use when stopping the daemon. Could be either
# a timeout in seconds or multiple signal/timeout pairs (like
# "SIGKILL/180 SIGTERM/300")
retry="${BFBD_SIGTERM_TIMEOUT}"

depend() {
	need localmount net
}

# verify
# 1) that the datadir exists and is writable (or create it)
# 2) that a directory for the pid exists and is writable
# 3) ownership and permissions on the config file
start_pre() {
	checkpath \
	-d \
	--mode 0750 \
	--owner "${BFBD_USER}:${BFBD_GROUP}" \
	"${BFBD_DATADIR}"

	checkpath \
	-d \
	--mode 0755 \
	--owner "${BFBD_USER}:${BFBD_GROUP}" \
	"${BFBD_PIDDIR}"

	checkpath -f \
	-o ${BFBD_USER}:${BFBD_GROUP} \
	-m 0660 \
	${BFBD_CONFIGFILE}

	checkconfig || return 1
}

checkconfig()
{
	if ! grep -qs '^rpcpassword=' "${BFBD_CONFIGFILE}" ; then
		eerror ""
		eerror "ERROR: You must set a secure rpcpassword to run bfbd."
		eerror "The setting must appear in ${BFBD_CONFIGFILE}"
		eerror ""
		eerror "This password is security critical to securing wallets "
		eerror "and must not be the same as the rpcuser setting."
		eerror "You can generate a suitable random password using the following "
		eerror "command from the shell:"
		eerror ""
		eerror "bash -c 'tr -dc a-zA-Z0-9 < /dev/urandom | head -c32 && echo'"
		eerror ""
		eerror "It is recommended that you also set alertnotify so you are "
		eerror "notified of problems:"
		eerror ""
		eerror "ie: alertnotify=echo %%s | mail -s \"bfb Alert\"" \
			"admin@foo.com"
		eerror ""
		return 1
	fi
}
